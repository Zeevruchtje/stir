@function _get_column_fraction_data() {
    $result: ();

    // Loop denominators
    @each $i in if(length($columns) == 1, range(1, $columns), sort($columns)) {
        @if $i > 22 or $i < 1 {
            @error 'The $columns variable can only contains values from 1 to 22';
        }

        // Loop numerators
        @for $j from if($i == 1, $i, $i - 1) through 1 {
            $gcm: get-gcm($j, $i);

            @if $gcm == 1 or $generate-duplicate-columns {
                $item: (
                    'width': decimal-round(100% * ($j / $i), 4),
                    'fraction': #{if($j != 1, $j, '')}#{$i},
                    'same-as': null
                );

                @if $gcm > 1 {
                    @each $fraction in $result {
                        @if map-get($fraction, 'width') == map-get($item, 'width') and map-get($item, 'same-as') == null {
                            $item: map-set($item, 'same-as', map-get($fraction, 'fraction'));
                        }
                    }
                }

                $result: append($result, $item);
            }
        }
    }

    @return $result;
}

@function _get_column_gap_data() {
    $result: [];

    @each $gap-size in sort(if(has-value($default-column-gap, $column-gaps), $column-gaps, join($column-gaps, ($default-column-gap)))) {
        $result: append($result, (
            'width': $gap-size,
            'is-default': $gap-size == $default-column-gap
        ));
    }

    @return $result;
}

@function _get_row_gap_data() {
    $result: [];

    @each $gap-size in sort(if(has-value($default-row-gap, $row-gaps), $row-gaps, join($row-gaps, ($default-row-gap)))) {
        $result: append($result, (
            'width': $gap-size,
            'is-default': $gap-size == $default-row-gap
        ));
    }

    @return $result;
}
