@function range($from, $to) {
    $map: ();

    @for $i from $from through $to {
        $map: append($map, $i);
    }

    @return $map;
}

@function in-map($needle, $haystack) {
    @each $item in $haystack {
        @if $item == $needle {
            @return true;
        }
    }

    @return false;
}

@function map-nth($map, $target, $get-key: false) {
    $ctr: 0;

    @each $key, $item in $map {
        @if $ctr == $target {
            @if $get-key {
                @return $key;
            }

            @return $item;
        }

        $ctr: $ctr + 1;
    }

    @return null;
}

@function is-breakpoint-char($value) {
    @return map-has-key($responsivity, $value);
}

@function is-map-first($map, $key) {
    @return map-nth($map, 0, true) == $key;
}

@function is-map-last($map, $key) {
    @return map-nth($map, length($map) - 1, true) == $key;
}

@function sort-map($map, $asc: true, $sort-by-key: false) {
    $smaller: ();
    $equal: ();
    $larger: ();

    @if length($map) > 1 {
        $center: map-nth($map, ceil(length($map) / 2), true);

        @each $key, $item in $map {
            @if(($sort-by-key == false and $item < $center) or ($sort-by-key == true and $key < $center)) {
                $smaller: map_merge($smaller, ($key: $item));
            } @elseif(($sort-by-key == false and $item > $center) or ($sort-by-key == true and $key > $center)) {
                $larger: map_merge($larger, ($key: $item));
            } @else {
                $equal: map_merge($equal, ($key: $item));
            }
        }

        @if $asc {
            @return map_merge(map_merge(sort-map($smaller, $asc, $sort-by-key), $equal), sort-map($larger, $asc, $sort-by-key));
        }

        @return map_merge(map_merge(sort-map($larger, $asc, $sort-by-key), $equal), sort-map($smaller, $asc, $sort-by-key));
    }

    @return $map;
}

@function map-after($map, $target-key, $get-key: false) {
    $found: false;

    @each $key, $item in $map {
        @if $found {
            @if $get-key {
                @return $key;
            }

            @return $item;
        } @elseif $key == $target-key {
            $found: true;
        }
    }

    @return null;
}

@function map-reverse($map) {
    $reversed-map: ();
    $keys: map-keys($map);

    @for $i from length($keys) through 1 {
        $key: nth($keys, $i);
        $reversed-map: map-merge($reversed-map, ($key: map-get($map, $key)));
    }

    @return $reversed-map;
}

@function map-empty($map) {
    @return length($map) == 0;
}

@function map-before($map, $target-key, $get-key: false) {
    $map: map-reverse($map);

    @return map-after($map, $target-key, $get-key);
}

@function get-gcm($numerator, $denominator) {
    @return if($denominator == 0, $numerator, get-gcm($denominator, $numerator % $denominator));
}

@function get-col-name($prefix, $numerator, $denominator) {
    @return $prefix + 'col-' + if($numerator == 1, $denominator, #{$numerator}#{$denominator});
}

@function get-gap-name($prefix, $numerator, $denominator, $suffix: '') {
    @return $prefix + 'gap' + $suffix + '-' + if($numerator == 1, $denominator, #{$numerator}#{$denominator});
}

@function calculate-breakpoint-px($character) {
    $breakpoint: map-get($responsivity, $character);

    @return map-get($breakpoint, 'breakpoint') + if(map-has-key($breakpoint, 'gap'), map-get($breakpoint, 'gap'), 0px) + $scrollbar-width;
}

@function pow($number, $exponent) {
    $return: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $return: $return * $number;
        }
    }

    @return $return;
}

@function map-to-selector($map, $comma-separated: true, $before: '', $after: '') {
    $return: '';

    @each $val in $map {
        $return: $return + $before + $val + $after + if($comma-separated, ',', '');
    }

    @return $return;
}

@function strip-unit($value) {
    @if type-of($value) == 'number' and not unitless($value) {
        @return $value / ($value * 0 + 1);
    }

    @return $value;
}

@function decimal-round($value, $decimals, $mode: 'round') {
    $exponent: pow(10, $decimals);

    @if in-map($mode, ('round', 'ceil', 'floor')) {
        @return call(get-function($mode), $value * $exponent) / $exponent;
    }

    @warn '#{$mode} is not a valid mode';
    @return $result;
}

// @function asFraction($a, $b) {
//     $gcm: gcm($a, $b);
//
//     @return $gcm;
//
//     @return $a / $gcm + "/" + $b / $gcm;
// }
