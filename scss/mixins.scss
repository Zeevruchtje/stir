@mixin columns($prefix: '', $extend: false) {
    $parsed-widths: ();

    @each $i in if(length($columns) == 1, range(1, $columns), $columns) {
        @if $i > 22 or $i < 1 {
            @error 'The $columns variable can only contains values from 1 to 22';
        }

        @for $j from if($i == 1, $i, $i - 1) through 1 {
            $gcm: get-gcm($j, $i);
            $skip-col-parse: $add-unnecessary-columns == false and $gcm > 1;

            @if $gcm > 1 and $add-unnecessary-columns {
                $existing-fraction: map-get($parsed-widths, 100 * ($j / $i));

                @if $existing-fraction {
                    .#{get-col-name($prefix, $j, $i)} {
                        @extend .#{get-col-name($prefix, map-get($existing-fraction, numerator), map-get($existing-fraction, denominator))};
                    }
                    .#{get-gap-name($prefix, $j, $i)} {
                        @extend .#{get-gap-name($prefix, map-get($existing-fraction, numerator), map-get($existing-fraction, denominator))};
                    }

                    $skip-col-parse: true;
                }
            }

            @if $skip-col-parse == false {
                .#{get-col-name($prefix, $j, $i)} {
                    width: decimal-round(100% * ($j / $i), 4);

                    @if $extend {
                        @extend #{$extend};
                    }
                }

                @if $i > 1 {
                    .#{get-gap-name($prefix, $j, $i, 'l')} {
                        margin-left: decimal-round(100% * ($j / $i), 4);
                    }
                    .#{get-gap-name($prefix, $j, $i, 'r')} {
                        margin-right: decimal-round(100% * ($j / $i), 4);
                    }
                }
            }

            @if map-get($parsed-widths, 100 * ($j / $i)) == null {
                $parsed-widths: map-merge($parsed-widths, (100 * ($j / $i): (numerator: $j, denominator: $i)));
            }
        }
    }

    .#{$prefix}col-f {
        @extend .#{$prefix}col-1 !optional;
    }

    .#{$prefix}gapl-none {
        margin-left: 0;
    }

    .#{$prefix}gapr-none {
        margin-right: 0;
    }
}

@mixin col-clearfixes($prefix: '') {
    .#{$prefix}noclear {
        > * {
            &:nth-child(1n) {
                clear: none;
            }
        }
    }
    @each $i in if(length($column-clear-fixes) == 1, range(2, $column-clear-fixes), $column-clear-fixes) {
        .#{$prefix}clear-#{$i} {
            > * {
                &:nth-child(1n) {
                    clear: none;
                }
                &:nth-child(#{$i}n+1) {
                    clear: both;
                }
            }
        }
    }
}

@mixin containers($prefix: '', $generate-no-jump: true, $extend: false) {
    @each $column-padding in if(in-map($default-column-gap, $column-gaps), $column-gaps, join($column-gaps, ($default-column-gap))) {
        .#{$prefix}container#{$column-padding / 1px} {
            @if $extend {
                @extend #{$extend};
            }

            padding-left: $column-padding;
            padding-right: $column-padding;
        }

        @if $column-padding == $default-column-gap {
            .#{$prefix}container {
                @extend .#{$prefix}container#{$column-padding / 1px};
            }
        }
    }

    @if $generate-no-jump {
        [class^="#{$prefix}container"].no-jump {
            max-width: $max-container-width;
        }
    }
}

@mixin grids($prefix: '', $extend: false) {
    @each $column-padding in if(in-map($default-column-gap, $column-gaps), $column-gaps, join($column-gaps, ($default-column-gap))) {
        .#{$prefix}grid#{$column-padding / 1px} {
            @if $extend {
                @extend %grid;
            }

            [class^="col-"] {
                padding-left: $column-padding;
                padding-right: $column-padding;
            }
        }

        [class^="col-"], [class^="container"] {
            .#{$prefix}grid#{$column-padding / 1px} {
                margin-left: #{0 - $column-padding};
                margin-right: #{0 - $column-padding};
            }
        }

        @if $column-padding == $default-column-gap {
            .#{$prefix}grid {
                @if $extend {
                    @extend %grid;
                }
                @extend .#{$prefix}grid#{$column-padding / 1px};
            }
        }
    }
}

@mixin floats($prefix: '') {
    .#{$prefix}left {
        float: left;
    }
    .#{$prefix}right {
        float: right;
    }
    .#{$prefix}nofloat {
        float: none;
    }
}

@mixin visibility-classes($prefix: '') {
    .#{$prefix}hidden {
        display: none;
    }
    .#{$prefix}visible {
        display: block;
    }
}

@mixin heading-scaling($font-scale-ratio) {
    @for $i from 1 through 6 {
        h#{$i}, .h#{$i} {
            font-size: decimal-round(pow($font-scale-ratio, 7 - $i), 2) + $font-size-unit;
        }
    }
}

@mixin media-query($from, $to: null) {
    @if is-breakpoint-char($from) and is-breakpoint-char($to)
        and map-get(map-get($responsivity, $from), 'breakpoint') < map-get(map-get($responsivity, $to), 'breakpoint') {
        $prev-from: $from;
        $from: $to;
        $to: $prev-from;
    }

    @if is-breakpoint-char($from) {
        $from: calculate-breakpoint-px($from);
    }

    @if $to == null {
        @media screen and (max-width: $from) { @content; }
    } @else {
        @if is-breakpoint-char($to) {
            $to: calculate-breakpoint-px($to) + 1px;
        }

        @media screen and (max-width: $from) and (min-width: $to) { @content; }
    }
}

@mixin media-query-up($from) {
    @if is-breakpoint-char($from) {
        $from: calculate-breakpoint-px($from) + 1px;
    }

    @media screen and (min-width: $from) { @content; }
}

@mixin media-query-down($from) {
    @include media-query($from) {
        @content;
    }
}

@mixin adaptive-background($full-size-url, $images) {
    @each $key in map-keys($images) {
        @if is-breakpoint-char($key) {
            $images: map-merge($images, (calculate-breakpoint-px($key): map-get($images, $key)));
            $images: map-remove($images, $key);
        }
    }

    $images: sort-map($images, $sort-by-key: true);

    @each $key, $url in $images {
        @if is-map-first($images, $key) {
            @include media-query-down($key) {
                background-image: url("#{$url}");
            }
        } @else {
            @include media-query(map-before($images, $key, true) + 1px, $key) {
                background-image: url("#{$url}");
            }

            @if is-map-last($images, $key) {
                @include media-query-up($key + 1px) {
                    background-image: url("#{$full-size-url}");
                }
            }
        }
    }
}
